<?php

/**
 * @file
 * Swagger module.
 */

use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;
use Symfony\Component\Routing\Route;
use Swagger\Analysis;
use Swagger\Annotations\Info;
use Swagger\Annotations\Swagger;
use Swagger\Processors\MergeIntoSwagger;

/**
 * Implements hook_help().
 */
function swagger_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.swagger':
      $output = '';
      $output .= '<h3>' . t('About Swagger') . '</h3>';
      $output .= '<p>' . t('Generate interactive Swagger documentation for your RESTful API using doctrine annotations.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function swagger_theme() {
  return array(
    'swagger_ui' => array(
      'render element' => 'elements',
    ),
  );
}

/**
 * Function _swagger_scan_and_save()
 */
function _swagger_scan_and_save($base_url, &$output_swagger_message) {
  //get drupal configurations
  $config = \Drupal::config('swagger.settings');
  $scan_folder = './' . $config->get('swagger_scan_folder');
  $file_path = './' . $config->get('swagger_scan_output');
  $json_file = $file_path . '/swagger.json';
  //prepare directory file
  if (!file_prepare_directory($file_path, FILE_CREATE_DIRECTORY)) {
    $message = t("You don't have permission in the directory: ") . $file_path;
    drupal_set_message(t('Written to: '), 'status');
    \Drupal::logger('my_module')->error($message);
    exit();
  }
  //Prepare the basic structure  
  $analysis = _swagger_prepare_base($base_url);
  $swagger = \Swagger\scan($scan_folder, array('analysis' => $analysis));
  // Output report
  _swagger_output_report($swagger, $output_swagger_message);
  //save fix
  if (file_put_contents($json_file, $swagger)) {
    drupal_set_message(t('Written to: ') . realpath($json_file), 'status');
  }
}

/**
 * Function _swagger_prepare_base()
 * 
 * @return $analysis new Analysis()
 */
function _swagger_prepare_base($base_url) {
  //Checking the swagger format files
  _swagger_check_json_format();
  //scan custom swagger processor
  $swagger_info_object = _swagger_info_object();
  //Get object swagger
  $swagger = new Swagger(_swagger_swagger_object($swagger_info_object, $base_url));
  $analysis = new Analysis([$swagger]);
  $analysis->process([
    new MergeIntoSwagger()
  ]);
  $analysis->validate();
  return $analysis;
}

/**
 * Function _swagger_output_report()
 */
function _swagger_output_report($swagger, &$output_swagger_message) {
  $methods = ['get', 'put', 'post', 'delete', 'options', 'head', 'patch'];
  $counter = 0;
  // Output report
  foreach ($swagger->paths as $path) {
    foreach ($path as $method => $operation) {
      if ($operation !== null && in_array($method, $methods)) {
        $output_swagger_message[] = str_pad($method, 7, ' ', STR_PAD_LEFT) . ' ' . $path->path;
        $counter++;
      }
    }
  }
  $output_swagger_message[] = $counter . t(' OPERATIONS DOCUMENTED.');
  if ($counter == 0) {
    drupal_set_message(t("Your code don't have annotations. Could you try to change the Scan folder path"), 'warning');
  }
  return $swagger;
}

/**
 * Function _swagger_check_json_format().
 *  
 * Checking the swagger format files
 */
function _swagger_check_json_format() {
  $errorTypes = [
    E_ERROR => 'ERROR',
    E_WARNING => 'WARNING',
    E_PARSE => 'PARSE',
    E_NOTICE => 'NOTICE',
    E_CORE_ERROR => 'CORE_ERROR',
    E_CORE_WARNING => 'CORE_WARNING',
    E_COMPILE_ERROR => 'COMPILE_ERROR',
    E_COMPILE_WARNING => 'COMPILE_WARNING',
    E_USER_ERROR => 'ERROR',
    E_USER_WARNING => 'WARNING',
    E_USER_NOTICE => 'NOTICE',
    E_STRICT => 'STRICT',
    E_RECOVERABLE_ERROR => 'RECOVERABLE_ERROR',
    E_DEPRECATED => 'DEPRECATED',
    E_USER_DEPRECATED => 'DEPRECATED'
  ];
  set_error_handler(function ($errno, $errstr, $file, $line) use ($errorTypes) {
    if (!(error_reporting() & $errno)) {
      return; // This error code is not included in error_reporting
    }
    $type = array_key_exists($errno, $errorTypes) ? $errorTypes[$errno] : 'ERROR';
    \Drupal::logger('my_module')->error('[' . $type . '] '.$errstr .' in '.$file.' on line '.$line);
    if ($type === 'ERROR') {
      exit($errno);
    }
  });
  set_exception_handler(function ($exception) {
    \Drupal::logger('my_module')->error('[EXCEPTION] '.$exception->getMessage() .' in '.$exception->getFile().' on line '.$exception->getLine());
    exit($exception->getCode() ?: 1);
  });
  \Swagger\Logger::getInstance()->log = function ($entry, $type) {
    $type = $type === E_USER_NOTICE ? 'INFO' : 'WARN';
    if ($entry instanceof Exception) {
      $entry = $entry->getMessage();
    }
    drupal_set_message(t('---  SWAGGER WARNING ---'), 'error');
    drupal_set_message('[' . $type . '] ' . $entry . PHP_EOL, 'error');
  };
}

/**
 * Function _swagger_info_object().
 * 
 * @return Info Object
 */
function _swagger_info_object() {
  $config = \Drupal::config('system.site');
  $site_name = $config->get('name');
  return [
    "title" => $site_name,
    "description" => "This is a sample server Petstore server.",
    "termsOfService" => "http://swagger.io/terms/",
    "contact" => [
      "name" => "API Support",
      "url" => "http://www.swagger.io/support",
      "email" => "support@swagger.io"
    ],
    "license" => [
      "name" => "Apache 2.0",
      "url" => "http://www.apache.org/licenses/LICENSE-2.0.html"
    ],
    "version" => "1.0"
  ];
}

/**
 * Function _swagger_swagger_object().
 * 
 * @return Info Object
 */
function _swagger_swagger_object($swagger_info_object, $base_url) {
  return [
    'swagger' => "2.0",
    'info' => new Info($swagger_info_object),
    'host' => preg_replace('/^http(s)?:\/\//i', '', $base_url),
    'basePath' => \Drupal::request()->getBasePath(),
    'schemes' => ['http', 'https'],
    'consumes' => ['application/json'],
    'produces' => ['application/json']
  ];
}